{"version":3,"sources":["components/Card/index.tsx","components/CardList/index.tsx","components/SearchBox/index.tsx","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","monster","id","email","name","className","alt","src","CardList","monsters","console","log","map","SearchBox","onChange","placeHolder","type","placeholder","e","target","value","App","useState","setMonsters","filter","setFilter","filteredMonsters","m","search","RegExp","useEffect","fetch","then","response","json","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAMe,SAASA,EAAT,GAAmC,IAAnBC,EAAkB,EAAlBA,QACrBC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KACnB,OACE,sBAA2BC,UAAU,iBAArC,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BL,EAA1B,4BAEL,6BAAKE,IACL,4BAAID,MANN,kBAAqBD,I,MCDV,SAASM,EAAT,GAAwC,IAApBC,EAAmB,EAAnBA,SAEjC,OADAC,QAAQC,IAAIF,GAEV,qBAAKJ,UAAU,YAAf,SACGI,EAASG,KAAI,SAACX,GAAD,OACZ,cAACD,EAAD,CAAMC,QAASA,S,MCNR,SAASY,EAAT,GAAsD,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,YAC5C,OACE,uBACEV,UAAU,SACVW,KAAK,SACLC,YAAaF,EACbD,SAAU,SAACI,GAAD,OAAOJ,EAASI,EAAEC,OAAOC,UCP1B,SAASC,IAAO,IAAD,EACIC,mBAAoB,IADxB,mBACrBb,EADqB,KACXc,EADW,OAEAD,mBAAS,IAFT,mBAErBE,EAFqB,KAEbC,EAFa,KAItBC,EAAmBjB,EAASe,QAChC,SAACG,GAAD,OAAOA,EAAEvB,KAAKwB,OAAO,IAAIC,OAAOL,EAAQ,OAAS,KASnD,OANAM,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACvB,GAAD,OAAcc,EAAYd,QACjC,IAGD,sBAAKJ,UAAU,MAAf,UACE,kDACA,cAACQ,EAAD,CAAWC,SAAUW,EAAWV,YAAY,oBAC5C,cAACP,EAAD,CAAUC,SAAUiB,OCtB1B,IAYeS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxB,EAAD,MAEFyB,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f29c50b6.chunk.js","sourcesContent":["import { Monster } from \"../../types/monster\"\nimport \"./styles.css\"\n\ninterface Props {\n  monster: Monster\n}\nexport default function Card({ monster }: Props) {\n  const { id, email, name } = monster\n  return (\n    <div key={`monster-${id}`} className=\"card-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\n      />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  )\n}\n","import { Monster } from \"../../types/monster\"\nimport Card from \"../Card\"\nimport \"./styles.css\"\n\ninterface Props {\n  monsters: Monster[]\n}\n\nexport default function CardList({ monsters }: Props) {\n  console.log(monsters)\n  return (\n    <div className=\"card-list\">\n      {monsters.map((monster) => (\n        <Card monster={monster} />\n      ))}\n    </div>\n  )\n}\n","import \"./styles.css\"\n\ninterface Props {\n  onChange: (value: string) => void\n  placeHolder: string\n}\n\nexport default function SearchBox({ onChange, placeHolder }: Props) {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeHolder}\n      onChange={(e) => onChange(e.target.value)}\n    />\n  )\n}\n","import \"./styles.css\"\nimport { useEffect, useState } from \"react\"\nimport CardList from \"../CardList\"\nimport { Monster } from \"../../types/monster\"\nimport SearchBox from \"../SearchBox\"\n\nexport default function App() {\n  const [monsters, setMonsters] = useState<Monster[]>([])\n  const [filter, setFilter] = useState(\"\")\n\n  const filteredMonsters = monsters.filter(\n    (m) => m.name.search(new RegExp(filter, \"i\")) >= 0,\n  )\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((monsters) => setMonsters(monsters))\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox onChange={setFilter} placeHolder=\"Search Monsters\" />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./components/App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}